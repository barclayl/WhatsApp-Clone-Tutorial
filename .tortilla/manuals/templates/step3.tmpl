![chats](https://user-images.githubusercontent.com/7648874/52663040-aa1dc180-2f40-11e9-9ae4-bda648916bc4.png)

In this step we will be implementing a basic chat app. We will be able to:

- Create chats.
- Remove chats.
- Send messages.

The flow is gonna go like this:

- A chat can be created by picking a user from the users list.
- When clicking on a chat, we will be promoted to a chat room.
- The chat room will have a pop-over menu where we will be able to remove the chat.

We will start by adding a new entity called `Recipient`. The `Recipient` entity is the bridge between the `User` and the `Message` and it will tell us when the message was received and when it was read. Note that a message holds multiple recipients - this way we can extend its functionality to support group messaging where each message can have more than 2 recipients. Accordingly, we will have to make few adjustments to the existing entities:

{{{ diffStep 3.1 module="server" }}}

The flow will require us to implement the following GraphQL operations:

- `users` query - Will be used to create a chat by picking a user from the users list.
- `addMessage` mutation
- `addChat` mutation
- `removeChat` mutation

Accordingly we will define the operations in our schema and implement their resolvers:

{{{ diffStep 3.2 module="server" }}}

Remember that every change that happens in the back-end should trigger a subscription that will notify all the use regards that change. For the current flow, we should have the following subscriptions:

- `messageAdded` subscription
- `userAdded` subscription
- `userUpdated` subscription - Since we will be able to create a new chat by picking from a users list, this list needs to be synced with the most recent changes.

Let's implement these subscriptions:

{{{ diffStep 3.3 module="server" }}}

Now that we have that ready, we will get back to the client and implement the necessary components. We will start with the chat room screen. The layout consists of the following component:

- A navbar - Includes the name and a picture of the person we're chatting with, a "back" button to navigate back to the main screen, and a pop-over menu where we can remove the chat from.
- A messages list - The list of messages that were sent and received in the chat. This will be a scrollable view where message bubbles are colored differently based on who they belong to. Just like WhatsApp!
- A message box - The input that will be used to write the new message. This will include a "send" button right next to it.

Let's implement the components

{{{ diffStep 3.1 module="client" files="src/components/ChatRoomScreen" }}}

We're introduced to new 2 packages in the implementation above:

- [`uniqid`](https://www.npmjs.com/package/uniqid) - Used to generate a unique ID in our optimistic response.
- [`styled-components`](https://www.npmjs.com/package/styled-components) - Used to create encapsulated style for React components.

Let's install them then:

    $ yarn add uniqid@5.0.3 styled-components@4.1.3

You'll notice that there's a new fragment called `fullChat`. The full chat includes the base chat details, plus a list of messages that we're gonna view in the chat room screen. Let's define the fragment then:

{{{ diffStep 3.1 module="client" files="src/graphql/fragments" }}}

At this point the chat room should be functional. Let's add a dedicated route for it and make it navigatable by clicking on a chat item from the chats list screen:

{{{ diffStep 3.1 module="client" files="src/App, src/components/ChatsListScreen" }}}

Like we said in the previous step, everything in our application is connected and so whenever there's a mutation or a change in data we should update the cache. Let's define the right subscriptions and update our `cache.service`:

{{{ diffStep 3.1 module="client" files="src/graphql/subscriptions, src/services/cache" }}}

We've already implemented all the necessary subscription handlers in the server in the beginning of this step, so things should work smoothly.

Now we're gonna implement a users list component where we will be able to pick users and chat with them. The users list component is gonna be global to the rest of the components because we will be using it in other screens in the upcoming steps.

{{{ diffStep 3.2 module="client" files="src/components/UsersList" }}}

Now let's implement the new chat screen:

{{{ diffStep 3.2 module="client" files="src/components/NewChatScreen" }}}

And implement a dedicated route for it:

{{{ diffStep 3.2 module="client" files="src/App" }}}

We will also add a button which will redirect us right to the new chat screen:

{{{ diffStep 3.2 module="client" files="src/components/ChatsListScreen" }}}

Again, we will need to define the right subscriptions and update the cache accordingly:

{{{ diffStep 3.2 module="client" files="src/graphql/queries, src/graphql/subscriptions, src/services/cache" }}}

Now we have a real, functional chat app! Where we have a complete flow of:

- Signing in/up.
- Editing profile.
- Creating and removing chats.
- Sending messages.

In the next step we will to something slightly more complex and extend the current functionality by adding a group chatting feature where we will be able to communicate with multiple users in a single chat room.
